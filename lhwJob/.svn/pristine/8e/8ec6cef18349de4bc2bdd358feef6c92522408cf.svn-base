using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Collections.ObjectModel;
using Northwoods.GoXam;
using Northwoods.GoXam.Model;


using SMining.Core.Data;
using SMiningClient.WPF;

namespace DummyBuilder
{
    /// <summary>
    /// ProcessFlowChart.xaml에 대한 상호 작용 논리
    /// </summary>
    /// 

    

    public partial class ProcessFlowChart : Window
    {
        public List<DataProcess> allProcList;
        public List<DataProcess> finalProcList;
        public MyNodeData start;
        public MyNodeData end;

        
        

        public ProcessFlowChart(List<DataProcess> procList)
        {
            InitializeComponent();

            allProcList = procList;
            finalProcList = new List<DataProcess>();

            var model = new GraphLinksModel<MyNodeData, String, String, MyLinkData>();

            start = new MyNodeData() { Key="Start", isInit = false, Name="Start", Color="LightBlue", inputNum=0, outputNum=1, Location= new Point(10,10), _Deletable=false};
            end = new MyNodeData() { Key="End", isInit=false, Name="End", Color="LightBlue", inputNum=1, outputNum=0, Location = new Point(200,10), _Deletable=false};

            model.NodesSource = new ObservableCollection<MyNodeData>() {
                start,end
            };

            model.Modifiable = true;
            model.HasUndoManager = true;

            myDiagram.Model = model;
            myDiagram.AllowDrop = true;

            
            

            myPalette.Model = new GraphLinksModel<MyNodeData, String, String, MyLinkData>();

            List<MyNodeData> initNodeData = new List<MyNodeData>();

            int idx = 0;

            foreach(DataProcess dataProcess in allProcList)
            {
                initNodeData.Add(new MyNodeData(){Key=idx.ToString(), FuncBinding =(DataProcess)dataProcess.Clone(), Name=dataProcess.Name, Color="Lavender", inputNum=1, outputNum=1, Deletable=true});
                idx++;
            }

            myPalette.Model.NodesSource = initNodeData;

            

        }

        //adding item to children in stackpanel...

        
        //processor 아이콘 누를 경우의 이벤트로서 누르면 description하고 parameter 입력하는 창 갱신해야함
        private void Icon_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            MyNodeData node = Part.FindAncestor<Node>(sender as UIElement).Data as MyNodeData;
            
            Node n = Part.FindAncestor<Node>(sender as UIElement);

            if (node._dataProcess != null)
            {
                processDescription.NavigateToString("<html><head><meta http-equiv='Content-Type' content='text/html;charset=UTF-8'></head><body>" + node._dataProcess.Description + "</body></html>");
            }
            if (node._dataProcess != null)
            {
                OnParameterInput(node);
            }
        }

        private void OnParameterInput(MyNodeData node)
        {
            if (node.isInit == true)
            {
                for (int i = 0; i < allProcList.Count; i++)
                {
                    if (allProcList[i].Name == node.FuncBinding.Name)
                    {
                        node.FuncBinding = (DataProcess)allProcList[i].Clone();
                        node.isInit = false;
                        break;
                    }
                }
            }

            DataProcess dp = node.FuncBinding;

            panelLayout.Children.Clear();

            if (dp.IsSet("Option.List"))
            {
                DataProperty[] options = (DataProperty[])dp.Get("Option.List");

                int idx = 0;
                foreach (DataProperty op in options)
                {
                    Label l = new Label();
                    l.Margin = new Thickness(0,30+idx*50, 0, 0);
                    
                    l.Content = op.Description;

                    panelLayout.Children.Add(l);

                    String compType = "";
                    if (op.IsSet("Component.Type"))
                    {
                        compType = (String)op.Get("Component.Type");
                    }

                    if (compType.StartsWith("File") || compType.StartsWith("Directory"))
                    {
                        // 필드
                        
                        TextBox box = new TextBox();

                       

                        
                        box.Text = op.Value.ToString();
                        Thickness t = l.Margin;
                        t.Left = t.Left+20;
                        t.Top = t.Top + 5;
                        box.Width = 70;
                        box.Height = 20;
                        box.Margin = t;
                        box.IsReadOnly = true;
                        box.VerticalAlignment = VerticalAlignment.Top;
                        

                       
                        panelLayout.Children.Add(box);
                        
                        

                        // 버튼
                        Button btn = new Button();
                        btn.Content = "선택";

                        btn.Width = 50;
                        btn.Height = 22;
                        btn.VerticalAlignment = VerticalAlignment.Top;
                        t.Top = t.Top + 25;
                        btn.Margin = t;

                        panelLayout.Children.Add(btn);
                        
                        // 이벤트 핸들러
                        FileEventHandler fe = new FileEventHandler();
                        fe.DirectoryMode = compType.StartsWith("Directory");
                        fe.MultiSelectMode = compType.EndsWith("Multi");
                        fe.DataProcess = dp;
                        fe.OptionProperty = op;
                        fe.TextBox2 = box;
                        btn.Click += fe.handleEvent;
                    }

                    else if (compType == "TextArea")
                    {
                        TextBox box = new TextBox();
                        box.Text = op.Value.ToString();
                        panelLayout.Children.Add(box);

                        ComponentEventHandler c = new ComponentEventHandler();
                        c.DataProcess = dp;
                        c.OptionProperty = op;
                        box.TextChanged += c.handleEvent;
                    }

                    else if (compType == "ComboBox")
                    {
                        ComboBox cBox = new ComboBox();
                        cBox.Text = op.Value.ToString();

                        String[] values;
                        if (op.IsSet("DefaultValues"))
                        {
                            values = (String[])op.Get("DefaultValues");
                        }
                        else
                        {
                            values = op.Value.ToString().Split(',');
                            op.Set("DefaultValues", values);
                            op.Value = values[0];
                        }
                        foreach (String s in values)
                        {
                            cBox.Items.Add(s.Trim());
                        }
                        dp.Set(op.Name, op.Value);

                        if (values != null)
                        {
                            cBox.SelectedItem = op.Value.ToString();
                        }
                        else
                        {
                            cBox.SelectedIndex = 0;
                        }
                        panelLayout.Children.Add(cBox);

                        ComboBoxEventHandler c = new ComboBoxEventHandler();
                        c.DataProcess = dp;
                        c.ComboBox2 = cBox;
                        c.OptionProperty = op;
                        cBox.SelectionChanged += c.handleEvent;
                    }

                    else
                    {
                        /*
                         * box.Text = op.Value.ToString();
                        Thickness t = l.Margin;
                        t.Left = t.Left+20;
                        t.Top = t.Top + 5;
                        box.Width = 70;
                        box.Height = 20;
                        box.Margin = t;
                        box.IsReadOnly = true;
                        box.VerticalAlignment = VerticalAlignment.Top;
                        */

                        TextBox box = new TextBox();
                        box.Text = op.Value.ToString();
                        Thickness t = l.Margin;
                        t.Left = t.Left + 20;
                        t.Top = t.Top + 5;
                        box.Width = 70;
                        box.Height = 20;
                        box.Margin = t;
                        box.VerticalAlignment = VerticalAlignment.Top;
                        panelLayout.Children.Add(box);

                        
                        ComponentEventHandler c = new ComponentEventHandler();

                        c.DataProcess = dp;
                        c.OptionProperty = op;
                        box.TextChanged += c.handleEvent;
                        
                    }



                    idx = idx + 1;
                }
                

                
            }
            



        }
        /*
         * rid test = new Grid();
test.ColumnDefinitions.Add(new ColumnDefinition());
test.ColumnDefinitions.Add(new ColumnDefinition());
test.RowDefinitions.Add(new RowDefinition());
test.RowDefinitions.Add(new RowDefinition());
test.RowDefinitions.Add(new RowDefinition());

Label t1 = new Label();
t1.Content = "Test1";
Label t2 = new Label();
t2.Content = "Test2";
Label t3 = new Label();
t3.Content = "Test3";
Label t4 = new Label();
t4.Content = "Test4";
Label t5 = new Label();
t5.Content = "Test5";
Label t6 = new Label();
t6.Content = "Test6";

Grid.SetColumn(t1, 0);
Grid.SetRow(t1, 0);
test.Children.Add(t1);

Grid.SetColumn(t2, 1);
Grid.SetRow(t2, 0);
test.Children.Add(t2);

Grid.SetColumn(t3, 0);
Grid.SetRow(t3, 1);
test.Children.Add(t3);
         */


        private DataProcess findDataProcessWithStr(String name)
        {
            foreach(DataProcess dp in allProcList)
            {
                if (dp.Name == name)
                    return dp;
            }
            return null;
        }

        private Node findNodeWithStr(String name, List<Node> list)
        {
            foreach (Node n in list)
            {
                MyNodeData myData = n.Data as MyNodeData;

                if (myData.Key == name)
                    return n;
            }
            return null;
        }


        private void button_OK_Click_1(object sender, RoutedEventArgs e)
        {
            finalProcList.Clear();

            List<Node> nodeList = myDiagram.Nodes.ToList<Node>();

            

 

            Node currNode = nodeList[0];

            if ((nodeList[0].LinksOutOf).ToList<Link>().Capacity == 0)
                MessageBox.Show("시작점이 연결되지 않았습니다.");
            else if ((nodeList[1].LinksInto).ToList<Link>().Capacity == 0)
                MessageBox.Show("종료점이 연결되지 않았습니다.");
            else
            {
                DataProcess dp1 = (nodeList[2].Data as MyNodeData).FuncBinding;
                DataProcess dp2 = (nodeList[3].Data as MyNodeData).FuncBinding;

                DataProcess dp3 = (DataProcess)dp1.Clone();



                dp1.Description = "powerover";

                bool endLoop = false;
                bool success = false;
                bool noInit = false;

                while (endLoop == false)
                {
                    List<Link> linkOut = (currNode.LinksOutOf).ToList<Link>();
                    int cnt = 0;
                    foreach (Link k in linkOut)
                    {
                        Node nextNode = k.ToNode;

                        if (nextNode == null)
                        {
                            cnt++;
                        }

                        if ((nextNode.Data as MyNodeData).Name == "End")
                        {
                            success = true;
                            endLoop = true;
                        }
                        else if ((nextNode.Data as MyNodeData).isInit == true)
                        {
                            noInit = true;
                            endLoop = true;
                        }
                        else
                        {
                            DataProcess dp = (nextNode.Data as MyNodeData)._dataProcess;

                            if (dp != null)
                            {
                                finalProcList.Add(dp);

                                Node next = findNodeWithStr((nextNode.Data as MyNodeData).Key, nodeList);
                                if (next != null)
                                    currNode = next;
                            }
                        }
                    }

                    if (cnt == linkOut.Count)
                    {                        
                        endLoop = true;
                    }
                }

                if (success == true)
                {
                    String s="Process: ";
                    for (int i = 0; i < finalProcList.Count; i++)
                    {
                        s = s + finalProcList[i].Name + ' ';
                    }
                    MessageBox.Show(s);
                }
                else if (noInit == true)
                    MessageBox.Show("몇 몇 Process의 변수가 설정되지 않았습니다.");
                else
                    MessageBox.Show("중간에 끊긴 부분이 있습니다.");
            }
        }

        private void button_Cancel_Click_1(object sender, RoutedEventArgs e)
        {
            finalProcList.Clear();
        }

    }


[Serializable]  // serializable in WPF to support the clipboard
public class MyNodeData : GraphLinksModelNodeData<String>
{
    public string _name;
    public int _inputNum;
    public int _outputNum;
    public bool _Deletable;
    public bool[] _availableInput = new bool[3]{false,false,false};
    public bool[] _availableOutput = new bool[3]{false,false,false};
    public bool isInit = true;

    public DataProcess _dataProcess;

    public DataProcess FuncBinding
    {
        get { return _dataProcess; }
        set
        {
            _dataProcess = (DataProcess)value.Clone();
        }
    }
    

    public String Name
    {
        get { return _name; }
        set
        {
            _name = value;
        }
    }
    
    public String Color
    {
        get { return _Color; }
        set
        {
            if (_Color != value)
            {
                String old = _Color;
                _Color = value;
            }
        }
    }

    public bool Deletable
    {
        get { return _Deletable; }
        set
        {
            _Deletable = value;
        }
    }


    public int inputNum
    {
        get { return _inputNum; }
        set
        {
            _inputNum = value;
            for (int i = 0; i < _inputNum; i++)
            {
                _availableInput[i] = true;
            }
        }
    }

    public int outputNum
    {
        get { return _outputNum; }
        set
        {
            _outputNum = value;
            for (int i = 0; i < _outputNum; i++)
                _availableOutput[i] = true;
        }
    }

    public bool[] AvailableInput
    {
        get
        {
            return _availableInput;
        }
    }

    public bool[] AvailableOutput
    {
        get
        {
            return _availableOutput;
        }
    }

    private String _Color = "White";
}

[Serializable]
public class MyLinkData : GraphLinksModelLinkData<String, String>
{

}

   

}
